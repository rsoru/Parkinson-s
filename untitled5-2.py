# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SzNowTTsdY0rQV9NKfeD6VZ0LFMRNtef
"""

# Parkinson's Prediction App using Structured Inputs (Form + CSV + SHAP)

# Import necessary libraries
import streamlit as st
import pandas as pd
import numpy as np
import pickle
import xgboost as xgb
import matplotlib.pyplot as plt

# Load trained XGBoost model and scaler
# Ensure the model file exists at this path when deploying
try:
    with open("model/xgb_model.pkl", "rb") as f:
        model = pickle.load(f)
except FileNotFoundError:
    st.error("Model file 'model/xgb_model.pkl' not found. Please ensure the model is in the correct location.")
    st.stop() # Stop the app if the model is not found


# Page layout
st.title("Parkinson's Structured Data Predictor")
st.write("Upload a CSV or enter acoustic biomarker values manually to predict Parkinson's disease.")

# Feature names (from UCI dataset)
FEATURES = [
    "MDVP:Fo(Hz)", "MDVP:Fhi(Hz)", "MDVP:Flo(Hz)",
    "MDVP:Jitter(%)", "MDVP:Jitter(Abs)", "MDVP:RAP", "MDVP:PPQ",
    "Jitter:DDP", "MDVP:Shimmer", "MDVP:Shimmer(dB)", "Shimmer:APQ3",
    "Shimmer:APQ5", "MDVP:APQ", "Shimmer:DDA", "NHR", "HNR",
    "RPDE", "DFA", "spread1", "spread2", "D2", "PPE"
]

# Input option
option = st.radio("How would you like to provide input?", ["Manual Entry", "Upload CSV"])

input_df = pd.DataFrame()

if option == "Manual Entry":
    st.subheader("Manually Enter Feature Values")
    user_input = {}
    for feat in FEATURES:
        # Added a check to ensure number_input works with potentially large or small floats
        user_input[feat] = st.number_input(feat, value=0.0, format="%.6f") # Use a more precise format
    input_df = pd.DataFrame([user_input])

elif option == "Upload CSV":
    uploaded_file = st.file_uploader("Upload CSV with the same 22 features", type=["csv"])
    if uploaded_file:
        try:
            input_df = pd.read_csv(uploaded_file)
            # Optional: Add validation to check if uploaded CSV has the correct columns
            if not all(feat in input_df.columns for feat in FEATURES):
                st.error("Uploaded CSV does not contain all required features. Please check the column names.")
                input_df = pd.DataFrame() # Clear input_df to prevent prediction with wrong data
            else:
                 st.write("Preview of uploaded data:")
                 st.dataframe(input_df)
        except Exception as e:
             st.error(f"Error reading CSV file: {e}")
             input_df = pd.DataFrame() # Clear input_df on error


# Predict & show results
if not input_df.empty and len(input_df.columns) == len(FEATURES): # Ensure correct columns are present
    st.subheader("Model Prediction")
    try:
        prediction = model.predict(input_df)
        proba = model.predict_proba(input_df)[:, 1]

        for i in range(len(prediction)):
            label = "Parkinson's detected" if prediction[i] == 1 else "No Parkinson's"
            st.markdown(f"**Sample {i+1}:** {label}  ")
            st.markdown(f"Confidence: **{proba[i]*100:.2f}%**")
    except Exception as e: # Catch potential errors during prediction
        st.error(f"Error during prediction: {e}")


# Footer
st.markdown("---")
st.caption("This app is for educational purposes and not a diagnostic tool.")