# -*- coding: utf-8 -*-
"""App_last.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JekzquUxT2dTuMIRoOQE6v7Inrr_22g4
"""

import streamlit as st
import pandas as pd
import numpy as np
import pickle
import xgboost as xgb
import matplotlib.pyplot as plt
import shap

# Load trained XGBoost model and scaler
with open("model/xgb_model.pkl", "rb") as f:
    model = pickle.load(f)

# Page layout
st.title("Parkinson's Structured Data Predictor")
st.write("Upload a CSV or enter acoustic biomarker values manually to predict Parkinson's disease.")

# Feature names (from UCI dataset)
FEATURES = [
    "MDVP:Fo(Hz)", "MDVP:Fhi(Hz)", "MDVP:Flo(Hz)",
    "MDVP:Jitter(%)", "MDVP:Jitter(Abs)", "MDVP:RAP", "MDVP:PPQ",
    "Jitter:DDP", "MDVP:Shimmer", "MDVP:Shimmer(dB)", "Shimmer:APQ3",
    "Shimmer:APQ5", "MDVP:APQ", "Shimmer:DDA", "NHR", "HNR",
    "RPDE", "DFA", "spread1", "spread2", "D2", "PPE"
]

# Input option
option = st.radio("How would you like to provide input?", ["Manual Entry", "Upload CSV"])

input_df = pd.DataFrame()

if option == "Manual Entry":
    st.subheader("Manually Enter Feature Values")
    user_input = {}
    for feat in FEATURES:
        user_input[feat] = st.number_input(feat, value=0.0, format="%f")
    input_df = pd.DataFrame([user_input])

elif option == "Upload CSV":
    uploaded_file = st.file_uploader("Upload CSV with the same 22 features", type=["csv"])
    if uploaded_file:
        input_df = pd.read_csv(uploaded_file)
        st.write("Preview of uploaded data:")
        st.dataframe(input_df)

# Predict & show results
if not input_df.empty:
    st.subheader("Model Prediction")
    prediction = model.predict(input_df)
    proba = model.predict_proba(input_df)[:, 1]

    for i in range(len(prediction)):
        label = "Parkinson's detected" if prediction[i] == 1 else "No Parkinson's"
        st.markdown(f"**Sample {i+1}:** {label}  ")
        st.markdown(f"Confidence: **{proba[i]*100:.2f}%**")

    # SHAP Explanation
    st.subheader("üîç SHAP Summary: Feature Importance")
    explainer = shap.TreeExplainer(model)
    shap_values = explainer.shap_values(input_df)
    st.set_option('deprecation.showPyplotGlobalUse', False)
    plt.title("Mean absolute SHAP value (feature importance)")
    shap.plots.bar(shap.Explanation(
        values=shap_values,
        base_values=explainer.expected_value,
        data=input_df,
        feature_names=input_df.columns
    ))
    st.pyplot(bbox_inches='tight')

# Footer
st.markdown("---")
st.caption("This app is for educational purposes and not a diagnostic tool.")